{"version":3,"sources":["components/images/Dallas.png","components/Cityscape.js","components/Location.js","components/DateComponent.js","components/Day.js","components/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Cityscape","showTemp","showDesc","showWind","setFarenheit","changeUnit","className","style","backgroundImage","CityscapeImg","type","onChange","defaultChecked","Location","getFormattedDate","dt","Date","shortMonths","day","formatDay","getDate","getFullYear","getDay","getMonth","DateComponent","Day","singleForecast","console","log","id","Forecast","forecast","map","App","useState","setApiState","setApiWeather","showFarenheit","setShowFarenheit","weatherTemp","setWeatherTemp","weatherDesc","setWeatherDesc","weatherWind","setWeatherWind","setApiForecast","forecastOne","forecastOneImg","forecastTwoImg","forecastThreeImg","forecastFourImg","forecastFiveImg","forecastList","setForecastList","useEffect","a","fetchWeather","weatherFromServer","main","temp","weather","description","wind","speed","getWeather","fetchForecast","forecastFromServer","daysList","moment","list","dt_txt","format","desc","temp_max","icon","newForecastList","includes","updateForecastList","getForecast","formatUnits","formatUrlWeather","units","concat","url","fetch","response","json","data","formatUrlForecast","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db426eb9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Dallas.a61faab2.png\";","import { useState, useEffect } from 'react'\nimport CityscapeImg from './images/Dallas.png'\n\nconst Cityscape = ({showTemp, showDesc, showWind, setFarenheit, changeUnit}) => {\n    \n    return (\n        <div className='cityscape' style={{backgroundImage: `url(${CityscapeImg})`}}>\n            \n            <div className='units'>\n                <label className='switch'>\n                    <input type='checkbox' onChange={changeUnit} defaultChecked={setFarenheit}/>\n                    \n                    <span className='slider round'>\n                        <span>C<sup>&deg;</sup></span>\n                        <span>F<sup>&deg;</sup></span>\n                    </span>\n                </label>\n            </div>\n            <div className='today'>\n                {showTemp}\n                {showDesc}\n                {showWind}\n            </div>\n        </div>\n    )\n}\n\nexport default Cityscape\n","import { MdLocationOn } from \"react-icons/md\";\n\nconst Location = () => {\n    return (\n        <div className='location'>\n            <h1><MdLocationOn /> Dallas, TX</h1>\n        </div>\n    )\n}\n\nexport default Location\n","const getFormattedDate = () => {\n    const dt = new Date()\n    dt.shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    dt.day = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    const todayFormatted = (formatDay(dt) + ', ' + shortMonths(dt) + ' ' + dt.getDate() + ', ' + dt.getFullYear())\n    return todayFormatted\n}\nconst formatDay = (dt) => { \n    return dt.day[dt.getDay()]; \n}\n \nconst shortMonths = (dt) => { \n     return dt.shortMonths[dt.getMonth()]; \n}\n\nconst DateComponent = () => {\n    return (\n        <div className='date'>\n            <h1>{getFormattedDate()}</h1>\n        </div>\n    )\n}\n\nexport default DateComponent\n","const Day = ({ singleForecast }) => {\n    return (\n        <div className='singleForecast'>\n            \n            <div key={singleForecast.id}>\n                <h1>{singleForecast.day}</h1>\n                {console.log(singleForecast)}\n            </div>\n        </div>\n    )\n}\n\nexport default Day\n","import Day from './Day'\n\nconst Forecast = ({ forecast }) => {\n    return (\n        <div className='forecast'>\n            {forecast.map( singleForecast => {\n                return (\n                    <Day key={singleForecast.id}\n                        singleForecast={singleForecast}\n                    />\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Forecast\n","// import logo from './logo.svg';\nimport { useState, useEffect } from 'react'\nimport moment from 'moment'\nimport Cityscape from './components/Cityscape'\nimport Location from './components/Location'\nimport DateComponent from './components/DateComponent'\nimport Forecast from './components/Forecast'\nimport { TiWeatherShower } from \"react-icons/ti\"\nimport { TiWeatherSnow } from \"react-icons/ti\"\nimport { TiWeatherStormy } from \"react-icons/ti\"\nimport { TiWeatherSunny } from \"react-icons/ti\"\nimport { TiWeatherWindyCloudy } from \"react-icons/ti\"\nimport { TiWeatherWindy } from \"react-icons/ti\"\nimport { TiWeatherCloudy } from \"react-icons/ti\"\nimport { TiWeatherDownpour } from \"react-icons/ti\"\nimport { TiWeatherPartlySunny } from \"react-icons/ti\"\n\n\nfunction App() {\n  const [apiState, setApiState] = useState([])\n  const [apiWeather, setApiWeather] = useState([])\n  const [showFarenheit, setShowFarenheit] = useState(true)\n  const [location, setLocation] = useState([])\n  const [weatherTemp, setWeatherTemp] = useState([])\n  const [weatherDesc, setWeatherDesc] = useState([])\n  const [weatherWind, setWeatherWind] = useState([])\n  const [apiForecast, setApiForecast] = useState([])\n\n  const [forecastOne, setForecastOne] = useState([])\n  const [forecastOneImg, setForecastOneImg] = useState([])\n  const [forecastTwoImg, setForecastTwoImg] = useState([])\n  const [forecastThreeImg, setForecastThreeImg] = useState([])\n  const [forecastFourImg, setForecastFourImg] = useState([])\n  const [forecastFiveImg, setForecastFiveImg] = useState([])\n\n  const [forecastList, setForecastList] = useState([])\n\n\n  useEffect(() => {\n    // document.title = `You clicked ${count} times`;\n    const getWeather = async () => {\n      const weatherFromServer = await fetchWeather()\n      setApiWeather(weatherFromServer)\n      setWeatherTemp(weatherFromServer.main.temp)\n      setWeatherDesc(weatherFromServer.weather[0].description)\n      setWeatherWind(weatherFromServer.wind.speed)\n    }\n    getWeather()\n\n    const getForecast = async () => {\n      const forecastFromServer = await fetchForecast()\n      setApiForecast(forecastFromServer)\n      \n      const daysList = [\n        {\n          id: 1,\n          day: moment(forecastFromServer.list[2].dt_txt).format('ddd'),\n          desc: forecastFromServer.list[2].weather[0].description,\n          temp: forecastFromServer.list[2].main.temp_max,\n          icon: forecastOneImg\n        },\n        {\n          id: 2,\n          day: moment(forecastFromServer.list[10].dt_txt).format('ddd'),\n          desc: forecastFromServer.list[10].weather[0].description,          \n          temp: forecastFromServer.list[10].main.temp_max,\n          icon: forecastTwoImg\n        },\n        {\n          id: 3,\n          day: moment(forecastFromServer.list[18].dt_txt).format('ddd'),\n          desc: forecastFromServer.list[18].weather[0].description,          \n          temp: forecastFromServer.list[18].main.temp_max,\n          icon: forecastThreeImg\n        },\n        {\n          id: 4,\n          day: moment(forecastFromServer.list[26].dt_txt).format('ddd'),\n          desc: forecastFromServer.list[26].weather[0].description,          \n          temp: forecastFromServer.list[26].main.temp_max,\n          icon: forecastFourImg\n        },\n        {\n          id: 5,\n          day: moment(forecastFromServer.list[34].dt_txt).format('ddd'),\n          desc: forecastFromServer.list[34].weather[0].description,          \n          temp: forecastFromServer.list[34].main.temp_max,\n          icon: forecastFiveImg\n        }\n      ]\n        \n      setForecastList(daysList)\n      \n      \n      const updateForecastList = () => {\n        const newForecastList = forecastList.map(forecast => {\n          \n          if (forecast.desc.includes(\"rain\")) {\n            const updatedForecast = {\n              ...forecast,\n              icon: <TiWeatherShower/>\n            }\n            return updatedForecast\n          } \n          if (forecast.desc.includes(\"cloud\")) {\n            const updatedForecast = {\n              ...forecast,\n              icon: <TiWeatherCloudy/>\n            }\n            return updatedForecast\n          } \n          \n          return forecast\n        })\n        setForecastList(newForecastList)\n      }\n      updateForecastList()\n      \n      console.log(forecastFromServer.list[2].weather[0].description)\n\n    }\n    getForecast()\n\n    const mappingForecast = () => {\n      let newArry = []\n      forecastList.map( d => {\n        newArry.push(\n          <div className='day'>\n            {d.day}\n          </div>\n        )\n        \n      })\n      setForecastOne(newArry)\n    }\n\n  }, [setApiState])\n\n  const formatLocation = () => {\n    const city = 'Dallas'\n    const state = 'TX'\n    const country = 'USA'\n    return 'q=' + city + ',' + state + ',' + country\n  }\n\n  const formatZip = () => {\n    const zip = '75001'\n    return '&zip=' + zip\n  }\n  \n  const formatUnits = () => {\n    let units = 'imperial'\n    showFarenheit ? (\n      units = 'imperial'\n    ) : (\n      units = 'standard'\n    )\n    return '&units=' + units\n  }\n\n  const formatUrlWeather = () => {\n    const baseURL = 'http://api.openweathermap.org/data/2.5/'\n    const type = 'weather?'\n    const location = formatLocation()\n    const zip = formatZip()\n    const appId = '&appid=e646dda1e4dd26c9ba07acc84bb8c9a5'\n    const units = formatUnits()\n    const url = baseURL.concat(type, location, zip, appId ,units)\n    return url\n  }\n  // setApiState({ loading: true })\n  \n  const fetchWeather = async () => {\n    \n    const url = formatUrlWeather()\n    const response = await fetch(url)\n    const data = await response.json()\n\n    return data\n  }\n\n  const formatUrlForecast = () => {\n    const baseURL = 'http://api.openweathermap.org/data/2.5/'\n    const type = 'forecast?'\n    const location = formatLocation()\n    const zip = formatZip()\n    const appId = '&appid=e646dda1e4dd26c9ba07acc84bb8c9a5'\n    const units = formatUnits()\n    const url = baseURL.concat(type, location, zip, appId ,units)\n    return url\n  }\n  // setApiState({ loading: true })\n  \n  const fetchForecast = async () => {\n    const url = formatUrlForecast()\n    const response = await fetch(url)\n    const data = await response.json()\n\n    return data\n  }\n  \n\n    \n  \n  \n  return (\n    <div className=\"container\">\n      <Location />\n      <DateComponent />\n      <Cityscape setFarenheit={showFarenheit} \n        changeUnit={ () => setShowFarenheit(!showFarenheit) }\n        showTemp={weatherTemp}\n        showDesc={weatherDesc}\n        showWind={weatherWind}\n      />\n      <Forecast forecast={forecastList} />   \n\n      <p>{forecastOne}</p>\n        {/* {forecastList.map( (forecast, index) => \n          <div> \n            {forecast.day}\n            {console.log(forecast.day)}\n          </div>\n        )} */}\n        \n\n      \n      {showFarenheit ? (\"FARENHEIT\") : (\"CELCIUS\")}\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}